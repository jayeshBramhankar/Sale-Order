package model.entity;

import java.math.BigDecimal;
import java.math.BigInteger;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Apr 13 15:04:04 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SaleDetailImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        SdId,
        SdSrNo,
        SdItemId,
        SdRate,
        SdQuantity,
        SdValue,
        SaleHeader;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SDID = AttributesEnum.SdId.index();
    public static final int SDSRNO = AttributesEnum.SdSrNo.index();
    public static final int SDITEMID = AttributesEnum.SdItemId.index();
    public static final int SDRATE = AttributesEnum.SdRate.index();
    public static final int SDQUANTITY = AttributesEnum.SdQuantity.index();
    public static final int SDVALUE = AttributesEnum.SdValue.index();
    public static final int SALEHEADER = AttributesEnum.SaleHeader.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SaleDetailImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.SaleDetail");
    }


    /**
     * Gets the attribute value for SdId, using the alias name SdId.
     * @return the value of SdId
     */
    public BigInteger getSdId() {
        return (BigInteger) getAttributeInternal(SDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SdId.
     * @param value value to set the SdId
     */
    public void setSdId(BigInteger value) {
        setAttributeInternal(SDID, value);
    }

    /**
     * Gets the attribute value for SdSrNo, using the alias name SdSrNo.
     * @return the value of SdSrNo
     */
    public Integer getSdSrNo() {
        return (Integer) getAttributeInternal(SDSRNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SdSrNo.
     * @param value value to set the SdSrNo
     */
    public void setSdSrNo(Integer value) {
        setAttributeInternal(SDSRNO, value);
    }

    /**
     * Gets the attribute value for SdItemId, using the alias name SdItemId.
     * @return the value of SdItemId
     */
    public BigInteger getSdItemId() {
        return (BigInteger) getAttributeInternal(SDITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SdItemId.
     * @param value value to set the SdItemId
     */
    public void setSdItemId(BigInteger value) {
        setAttributeInternal(SDITEMID, value);
    }

    /**
     * Gets the attribute value for SdRate, using the alias name SdRate.
     * @return the value of SdRate
     */
    public BigDecimal getSdRate() {
        return (BigDecimal) getAttributeInternal(SDRATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SdRate.
     * @param value value to set the SdRate
     */
    public void setSdRate(BigDecimal value) {
        setAttributeInternal(SDRATE, value);
    }

    /**
     * Gets the attribute value for SdQuantity, using the alias name SdQuantity.
     * @return the value of SdQuantity
     */
    public Integer getSdQuantity() {
        return (Integer) getAttributeInternal(SDQUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for SdQuantity.
     * @param value value to set the SdQuantity
     */
    public void setSdQuantity(Integer value) {
        setAttributeInternal(SDQUANTITY, value);
    }

    /**
     * Gets the attribute value for SdValue, using the alias name SdValue.
     * @return the value of SdValue
     */
    public BigDecimal getSdValue() {
        return (BigDecimal) getAttributeInternal(SDVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SdValue.
     * @param value value to set the SdValue
     */
    public void setSdValue(BigDecimal value) {
        setAttributeInternal(SDVALUE, value);
    }

    /**
     * @return the associated entity SaleHeaderImpl.
     */
    public SaleHeaderImpl getSaleHeader() {
        return (SaleHeaderImpl) getAttributeInternal(SALEHEADER);
    }

    /**
     * Sets <code>value</code> as the associated entity SaleHeaderImpl.
     */
    public void setSaleHeader(SaleHeaderImpl value) {
        setAttributeInternal(SALEHEADER, value);
    }


    /**
     * @param sdId key constituent
     * @param sdSrNo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigInteger sdId, Integer sdSrNo) {
        return new Key(new Object[] { sdId, sdSrNo });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        setSdSrNo(getSaleHeader().getMaxNo()+1);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

