package model.entity;


import java.math.BigInteger;

import java.sql.CallableStatement;

import java.sql.ResultSet;

import java.sql.SQLException;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Apr 13 00:59:28 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SaleHeaderImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        SaId,
        SaDate,
        SaPartyId,
        SaDeliveryAdd,
        SaContact,
        SaleDetail;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int SAID = AttributesEnum.SaId.index();
    public static final int SADATE = AttributesEnum.SaDate.index();
    public static final int SAPARTYID = AttributesEnum.SaPartyId.index();
    public static final int SADELIVERYADD = AttributesEnum.SaDeliveryAdd.index();
    public static final int SACONTACT = AttributesEnum.SaContact.index();
    public static final int SALEDETAIL = AttributesEnum.SaleDetail.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SaleHeaderImpl() {
    }

    /**
     * Gets the attribute value for SaId, using the alias name SaId.
     * @return the value of SaId
     */
    public BigInteger getSaId() {
        return (BigInteger) getAttributeInternal(SAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SaId.
     * @param value value to set the SaId
     */
    public void setSaId(BigInteger value) {
        setAttributeInternal(SAID, value);
    }

    /**
     * Gets the attribute value for SaDate, using the alias name SaDate.
     * @return the value of SaDate
     */
    public Date getSaDate() {
        return (Date) getAttributeInternal(SADATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SaDate.
     * @param value value to set the SaDate
     */
    public void setSaDate(Date value) {
        setAttributeInternal(SADATE, value);
    }

    /**
     * Gets the attribute value for SaPartyId, using the alias name SaPartyId.
     * @return the value of SaPartyId
     */
    public BigInteger getSaPartyId() {
        return (BigInteger) getAttributeInternal(SAPARTYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SaPartyId.
     * @param value value to set the SaPartyId
     */
    public void setSaPartyId(BigInteger value) {
        setAttributeInternal(SAPARTYID, value);
    }

    /**
     * Gets the attribute value for SaDeliveryAdd, using the alias name SaDeliveryAdd.
     * @return the value of SaDeliveryAdd
     */
    public String getSaDeliveryAdd() {
        return (String) getAttributeInternal(SADELIVERYADD);
    }

    /**
     * Sets <code>value</code> as the attribute value for SaDeliveryAdd.
     * @param value value to set the SaDeliveryAdd
     */
    public void setSaDeliveryAdd(String value) {
        setAttributeInternal(SADELIVERYADD, value);
    }

    /**
     * Gets the attribute value for SaContact, using the alias name SaContact.
     * @return the value of SaContact
     */
    public Long getSaContact() {
        return (Long) getAttributeInternal(SACONTACT);
    }

    /**
     * Sets <code>value</code> as the attribute value for SaContact.
     * @param value value to set the SaContact
     */
    public void setSaContact(Long value) {
        setAttributeInternal(SACONTACT, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSaleDetail() {
        return (RowIterator) getAttributeInternal(SALEDETAIL);
    }

    /**
     * @param saId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigInteger saId) {
        return new Key(new Object[] { saId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entity.SaleHeader");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void prepareForDML(int operation, TransactionEvent e) {
        System.err.println("Call impl method-----------"+operation+" DML_INSERT "+DML_INSERT);
        super.prepareForDML(operation, e);
        if(operation==DML_INSERT){
            this.setSaId(this.getMaxNumber());
        }
       

    }
    private BigInteger getMaxNumber(){
        
        BigInteger maxValue = BigInteger.ZERO;
        String query= "Select nvl(max(h.sa_id),0)+1 as maxval from sale_header h";
        CallableStatement stmt = this.getDBTransaction().createCallableStatement(query, 0);
        ResultSet rs;
        try {
            rs = stmt.executeQuery();
            while(rs.next()){
                maxValue =new BigInteger(rs.getString("maxval"));
            }
            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
       
        System.err.println("Call impl method"+maxValue);
        return maxValue;
    }
    
    public int getMaxNo() {

        int maxNo = 0;
        RowIterator rowIter = getSaleDetail();
        while (rowIter.hasNext()) {
            rowIter.setCurrentRow(rowIter.next());
            Row row = rowIter.getCurrentRow();
            if (row != null) {
                if (maxNo < Integer.parseInt(row.getAttribute("SdSrNo").toString())) {
                    maxNo = Integer.parseInt(row.getAttribute("SdSrNo").toString());
                }
            }
        }
        return maxNo;
    }
}

